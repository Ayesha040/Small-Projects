import java.util.Iterator;
import java.util.ArrayList;

/**
 * A simple implementation of an ISet. 
 * Elements are not in any particular order.
 * Students are to implement methods that 
 * were not implemented in AbstractSet and override
 * methods that can be done more efficiently. 
 * An ArrayList must be used as the internal storage container.
 *
 */
public class UnsortedSet<E> extends AbstractSet<E> {

    private ArrayList<E> myCon;

    // initialize
    public UnsortedSet() {
        myCon = new ArrayList<E>();
    }

    /**
     * Add an item to this set.
     * <br> item != null
     * @param item the item to be added to this set. item may not equal null.
     * @return true if this set changed as a result of this operation, 
     * false otherwise.
     * O(N)
     */
    public boolean add(E item) {
        if (item == null) {
            throw new NullPointerException("Precondition: item != null");
        }
        // if item is not there, add it
        if (!this.contains(item)) {
            myCon.add(item);
            return true;
        } else {
            return false;  
        }
    }

    /**
     * A union operation. Add all items of otherSet that 
     * are not already present in this set to this set.
     * @param otherSet != null
     * @return true if this set changed as a result of this operation, 
     * false otherwise.
     * O(N^2)
     */
    public boolean addAll(ISet<E> otherSet) {
        if (otherSet == null) {
            throw new NullPointerException("Precondition: otherSet != null");
        }
        boolean hasChanged = false;
        Iterator<E> itOther = otherSet.iterator();
        // iterate through the other set
        while (itOther.hasNext()) {
            E temp = itOther.next();
            // if element isn't in this set, add it
            if (!this.contains(temp)) {
                myCon.add(temp);
                hasChanged = true;
            }
        }
        return hasChanged;
    }

    // clear and reset size
    // O(N)
    public void clear() {
        myCon.clear();
    }

    /**
     * Determine if item is in this set. 
     * <br>pre: item != null
     * @param item element whose presence is being tested. 
     * Item may not equal null.
     * @return true if this set contains the specified item, false otherwise.
     * O(N)
     */
    public boolean contains(E item) {
        if (item == null) {
            throw new NullPointerException("Precondition: item != null");
        }
        return myCon.contains(item);
    }

    /**
     * Determine if all of the elements of otherSet are in this set.
     * <br> pre: otherSet != null
     * @param otherSet != null
     * @return true if this set contains all of the elements in otherSet, 
     * false otherwise.
     * O(N^2)
     */    
    public boolean containsAll(ISet<E> otherSet) {
        if (otherSet == null) {
            throw new NullPointerException("Precondition: otherSet != null");
        }        
        Iterator<E> otherIt = otherSet.iterator(); 
        // check if each element 
        while (otherIt.hasNext()) {
            // if not there, it's false
            if (!this.contains(otherIt.next())) {
                return false;
            }
        }
        return true;      
    }

    /**
     * Create a new set that is the difference of this set and otherSet. 
     * Return an ISet of elements that are in this Set but not in otherSet. 
     * Also called the relative complement. 
     * <br>Example: If ISet A contains [X, Y, Z] and ISet B contains [W, Z] 
     * then A.difference(B) would return an ISet with elements [X, Y] while
     * B.difference(A) would return an ISet with elements [W]. 
     * <br>pre: otherSet != null
     * <br>post: returns a set that is the difference of this set and otherSet.
     * Neither this set or otherSet are altered as a result of this operation.
     * <br> pre: otherSet != null
     * @param otherSet != null
     * @return a set that is the difference of this set and otherSet
     * O(N^2)
     */
    public ISet<E> difference(ISet<E> otherSet) {
        if (otherSet == null) {
            throw new NullPointerException("Precondition: otherSet != null");
        }
        // create new set
        UnsortedSet<E> result = new UnsortedSet<E>();
        // go through this con
        for (E item : myCon) {
            // if item is not in other, add it to result set
            if (!otherSet.contains(item)) {
                result.add(item);
            }
        }
        return result;
    }

    /**
     * Determine if this set is equal to other.
     * Two sets are equal if they have exactly the same elements.
     * The order of the elements does not matter.
     * <br>pre: none
     * @param other the object to compare to this set 
     * @return true if other is a Set and has the same elements as this set
     * O(N^2)
     */
    public boolean equals(Object other) {
        // the equals method from abstract
        return super.equals(other);
    }

    /**
     * create a new set that is the intersection of this set and otherSet.
     * <br>pre: otherSet != null<br>
     * <br>post: returns a set that is the intersection of this set 
     * and otherSet.
     * Neither this set or otherSet are altered as a result of this operation.
     * <br> pre: otherSet != null
     * @param otherSet != null
     * @return a set that is the intersection of this set and otherSet
     * O(N^2)
     */
    public ISet<E> intersection(ISet<E> otherSet) {
        // create new set
        UnsortedSet<E> result = new UnsortedSet<E>();
        Iterator<E> it = this.iterator();        
        // once the other contains items from this, add them
        while (it.hasNext()) {
            E temp = it.next();
            if (otherSet.contains(temp)) {
                result.add(temp);
            }
        }
        return result;
    }

    /**
     * Return an Iterator object for the elements of this set.
     * pre: none
     * @return an Iterator object for the elements of this set
     * O(1)
     */
    public Iterator<E> iterator() {
        return myCon.iterator();
    }

    /**
     * Remove the specified item from this set if it is present.
     * pre: item != null
     * @param item the item to remove from the set. item may not equal null.
     * @return true if this set changed as a result of this operation, 
     * false otherwise
     * O(N)
     */
    public boolean remove(E item) {
        if (item == null) {
            throw new NullPointerException("Precondition: item != null");
        }
        Iterator<E> it = this.iterator(); 
        // iterate and remove element that are equal to item
        while (it.hasNext()) {
            E temp = it.next();
            if (temp.equals(item)) {
                it.remove();
                return true;
            }
        }    
        // if item is not in this set
        return false;
    }

    // O(1)
    public int size() {
        return myCon.size();
    }

    /**
     * Create a new set that is the union of this set and otherSet.
     * <br>pre: otherSet != null
     * <br>post: returns a set that is the union of this set and otherSet.
     * Neither this set or otherSet are altered as a result of this operation.
     * <br> pre: otherSet != null
     * @param otherSet != null
     * @return a set that is the union of this set and otherSet
     * O(N^2)
     */
    public ISet<E> union(ISet<E> otherSet) {
        if (otherSet == null) {
            throw new NullPointerException("Precondition: otherSet != null");
        }
        // create new set
        UnsortedSet<E> result = new UnsortedSet<E>();
        Iterator<E> it = this.iterator();
        Iterator<E> otherit = otherSet.iterator();

        // add all of items from this
        while (it.hasNext()) {
            E temp = it.next();
            result.add(temp);
        }
        // add items from this that aren't already in result
        while (otherit.hasNext()) {
            E temp2 = otherit.next();
            if (!result.contains(temp2)) {
                result.add(temp2);
            }
        }
        return result;
    }
}
